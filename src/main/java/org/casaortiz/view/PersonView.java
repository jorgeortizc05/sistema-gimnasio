/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.casaortiz.view;

import org.casaortiz.view.components.ButtonsColors;
import com.github.sarxos.webcam.Webcam;
import com.github.sarxos.webcam.WebcamException;
import com.github.sarxos.webcam.WebcamPanel;
import java.awt.Color;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.sql.SQLException;
import java.util.List;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.casaortiz.dao.PersonDao;
import org.casaortiz.dao.TypePersonDao;
import org.casaortiz.model.Person;
import org.casaortiz.model.TypePerson;
import org.casaortiz.view.components.TableModels;

/**
 *
 * @author jorge
 */
public class PersonView extends javax.swing.JPanel {

    private PersonDao personDao;
    private Person person;
    private TypePersonDao typePersonDao;

    private Executor executor = Executors.newSingleThreadExecutor();
    private AtomicBoolean initialized = new AtomicBoolean(false);
    private Webcam webcam = null;
    private WebcamPanel panel = null;
    private boolean encendidoCamara = false;

    public PersonView() {
        initComponents();
        personDao = new PersonDao();
        typePersonDao = new TypePersonDao();
        person = new Person();
        loadPeople();
        loadTypePeople();
        btnSaveChanges.setVisible(false);
        btnDelete.setVisible(false);
        addImageButtons();
    }

    private void addImageButtons() {
        btnDelete.setIcon(new ButtonsColors().addIconButton(FileLocation.pathIconBtnDelete));
        btnSave.setIcon(new ButtonsColors().addIconButton(FileLocation.pathIconBtnSave));
        btnCleanForm.setIcon(new ButtonsColors().addIconButton(FileLocation.pathIconBtnClean));
        btnSaveChanges.setIcon(new ButtonsColors().addIconButton(FileLocation.pathIconBtnEdit));
        btnTakePhoto.setIcon(new ButtonsColors().addIconButton(FileLocation.pathIconBtnCamera));
        lblSearch.setIcon(new ButtonsColors().addIconButton(FileLocation.pathIconBtnSearch));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblActive = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtFirstName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtLastName = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtIdentificationId = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtAddress = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtPhone = new javax.swing.JTextField();
        btnCleanForm = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnSaveChanges = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        lblID = new javax.swing.JLabel();
        lblCamera = new javax.swing.JLabel();
        btnTakePhoto = new javax.swing.JButton();
        lblPhoto = new javax.swing.JLabel();
        txtDate = new rojeru_san.componentes.RSDateChooser();
        jLabel9 = new javax.swing.JLabel();
        cbTypePeople = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tListPeople = new javax.swing.JTable();
        txtSearch = new javax.swing.JTextField();
        lblSearch = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();

        lblActive.setText("jLabel10");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true), "CLIENTE", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 11))); // NOI18N

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        jLabel1.setText("ID:");

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        jLabel2.setText("Nombres:");

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        jLabel3.setText("Apellidos:");

        jLabel4.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        jLabel4.setText("Cédula:");

        jLabel5.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        jLabel5.setText("Dirección:");

        jLabel6.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        jLabel6.setText("Correo Electrónico:");

        jLabel7.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        jLabel7.setText("Fecha de Nacimiento:");

        jLabel8.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        jLabel8.setText("Teléfono:");

        btnCleanForm.setBackground(new java.awt.Color(252, 246, 214));
        btnCleanForm.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        btnCleanForm.setText("Limpiar Formulario");
        btnCleanForm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCleanFormActionPerformed(evt);
            }
        });

        btnDelete.setBackground(new java.awt.Color(212, 105, 89));
        btnDelete.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        btnDelete.setForeground(new java.awt.Color(255, 255, 255));
        btnDelete.setText("Eliminar");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnSaveChanges.setBackground(new java.awt.Color(53, 152, 219));
        btnSaveChanges.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        btnSaveChanges.setForeground(new java.awt.Color(255, 255, 255));
        btnSaveChanges.setText("Guardar Cambios");
        btnSaveChanges.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveChangesActionPerformed(evt);
            }
        });

        btnSave.setBackground(new java.awt.Color(0, 128, 129));
        btnSave.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        btnSave.setForeground(new java.awt.Color(255, 255, 255));
        btnSave.setText("Guardar");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        lblID.setPreferredSize(new java.awt.Dimension(5, 20));

        lblCamera.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        lblCamera.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true), "Cámara"));
        lblCamera.setPreferredSize(new java.awt.Dimension(400, 300));
        lblCamera.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblCameraMouseClicked(evt);
            }
        });

        btnTakePhoto.setBackground(new java.awt.Color(0, 128, 129));
        btnTakePhoto.setForeground(new java.awt.Color(255, 255, 255));
        btnTakePhoto.setText("Tomar Foto");
        btnTakePhoto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTakePhotoActionPerformed(evt);
            }
        });

        lblPhoto.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        lblPhoto.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true), "Foto"));
        lblPhoto.setPreferredSize(new java.awt.Dimension(400, 300));
        lblPhoto.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblPhotoMouseClicked(evt);
            }
        });

        txtDate.setFormatoFecha("dd/MM/yyyy");
        txtDate.setFuente(new java.awt.Font("Dialog", 1, 12)); // NOI18N

        jLabel9.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        jLabel9.setText("Tipo de Cliente:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnSave)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSaveChanges)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDelete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCleanForm))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8)
                            .addComponent(jLabel1)
                            .addComponent(jLabel9))
                        .addGap(0, 0, 0)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblID, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtEmail)
                            .addComponent(txtAddress)
                            .addComponent(txtIdentificationId)
                            .addComponent(txtLastName)
                            .addComponent(txtFirstName)
                            .addComponent(txtPhone)
                            .addComponent(txtDate, javax.swing.GroupLayout.DEFAULT_SIZE, 294, Short.MAX_VALUE)
                            .addComponent(cbTypePeople, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnTakePhoto)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblCamera, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblPhoto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(lblID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtIdentificationId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(cbTypePeople, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSaveChanges)
                    .addComponent(btnSave)
                    .addComponent(btnCleanForm)
                    .addComponent(btnDelete))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblCamera, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPhoto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnTakePhoto)
                .addGap(0, 14, Short.MAX_VALUE))
        );

        tListPeople.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nombres", "Apellidos", "Email", "Telefono", "Activo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tListPeople.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tListPeopleMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tListPeople);

        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });

        lblSearch.setPreferredSize(new java.awt.Dimension(30, 30));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 554, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 364, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnCleanFormActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCleanFormActionPerformed
        // TODO add your handling code here:
        cleanForm();
    }//GEN-LAST:event_btnCleanFormActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        try {
            int fila = tListPeople.getSelectedRow();
            if (fila == -1) {
                JOptionPane.showConfirmDialog(tListPeople, "Debe seleccionar una fila");
            } else {
                int estadoEliminacionDialog = JOptionPane.showConfirmDialog(btnDelete,
                        "Seguro que desea eliminar " + person + " ?",
                        "Confirmar", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (estadoEliminacionDialog == 0) {
                    personDao.delete(person.getId());
                    JOptionPane.showMessageDialog(btnDelete, "Se elimino correctamente la categoria: " + person);
                    loadPeople();
                    cleanForm();
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(CategoryView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(btnDelete, "Error al eliminar la categoria: " + person + " Error: " + ex.getMessage());
        } catch (Exception ex) {
            Logger.getLogger(CategoryView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(btnDelete, "Error al eliminar la categoria: " + person + " Error: " + ex.getMessage());
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnSaveChangesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveChangesActionPerformed
        // TODO add your handling code here:
        try {
            if (!(txtFirstName.getText().equals("") || txtLastName.getText().equals("")
                    || txtIdentificationId.getText().equals(""))) {
                Person person = new Person();
                person.setId(Integer.parseInt(lblID.getText()));
                person.setFirstName(txtFirstName.getText());
                person.setLastName(txtLastName.getText());
                person.setIdentificationId(txtIdentificationId.getText());
                person.setAddress(txtAddress.getText());
                person.setEmail(txtEmail.getText());
                person.setBirthday(txtDate.getDatoFecha());
                person.setPhone(txtPhone.getText());
                person.setActive(lblActive.getText());
                person.setPhoto(txtIdentificationId.getText());
                TypePerson tp = (TypePerson) cbTypePeople.getSelectedItem();
                person.setTypePersonId(tp.getId());
                personDao.update(person);
                JOptionPane.showMessageDialog(btnSave, "Cambios guardados correctamente");
                cleanForm();
                loadPeople();
            } else {
                JOptionPane.showMessageDialog(btnSave, "Nombres, Apellidos o Cédula no pueden estar vacios \n");
            }

        } catch (SQLException ex) {
            Logger.getLogger(CategoryView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(btnSave, "Error al guardar los cambios: " + ex.getMessage());
        } catch (Exception ex) {
            Logger.getLogger(CategoryView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(btnSave, "Error al guardar los cambios: " + ex.getMessage());
        }
    }//GEN-LAST:event_btnSaveChangesActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        try {
            if (!(txtFirstName.getText().equals("") || txtLastName.getText().equals("")
                    || txtIdentificationId.getText().equals(""))) {
                Person person = new Person();
                person.setFirstName(txtFirstName.getText());
                person.setLastName(txtLastName.getText());
                person.setIdentificationId(txtIdentificationId.getText());
                person.setAddress(txtAddress.getText());
                person.setEmail(txtEmail.getText());
                person.setBirthday(txtDate.getDatoFecha());
                person.setPhone(txtPhone.getText());
                person.setActive("Y");
                person.setPhoto(txtIdentificationId.getText());
                TypePerson tp = (TypePerson) cbTypePeople.getSelectedItem();
                person.setTypePersonId(tp.getId());
                personDao.insert(person);
                JOptionPane.showMessageDialog(btnSave, "Guardado correctamente");
                cleanForm();
                loadPeople();
            } else {
                JOptionPane.showMessageDialog(btnSave, "Nombres, Apellidos o Cédula no pueden estar vacios \n");
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(btnSave, "SQLException: Error al guardar: " + ex.toString());
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(btnSave, "Exception: Error al guardar: " + ex.getMessage());
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void cleanForm() {
        lblID.setText("");
        txtFirstName.setText("");
        txtLastName.setText("");
        txtIdentificationId.setText("");
        txtIdentificationId.setEnabled(true);
        txtAddress.setText("");
        txtEmail.setText("");
        txtDate.setDatoFecha(null);
        txtPhone.setText("");
        lblActive.setText("");
        btnSave.setVisible(true);
        btnSaveChanges.setVisible(false);
        btnDelete.setVisible(false);
        lblPhoto.setIcon(null);
    }

    public void loadPeople() {
        try {
            loadTable(personDao.getList());
        } catch (Exception ex) {
            Logger.getLogger(CategoryView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error al obtener datos de categoria: " + ex.getMessage());
        }
    }

    private void loadTable(List<Person> people) {

        tListPeople.setModel(TableModels.getModelPerson(tListPeople, people));
    }

    private void cleanTable() {
        DefaultTableModel modelo = (DefaultTableModel) tListPeople.getModel();
        modelo.setRowCount(0);
        tListPeople.setModel(modelo);
    }

    private void btnTakePhotoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTakePhotoActionPerformed
        // TODO add your handling code here:
        try {
            if (txtIdentificationId.getText().equals("")) {
                JOptionPane.showMessageDialog(txtIdentificationId, "Debe ingresar primero la cédula");
            } else {
                //nombre y formato de la imagen de salida
                Camera.takePhoto(webcam.getImage(), txtIdentificationId.getText());
                loadPhotoPerson(txtIdentificationId.getText() + ".png");
                webcam.close();
                panel.stop();
                encendidoCamara = false;
            }

        } catch (IOException ex) {
            JOptionPane.showMessageDialog(lblCamera, "Active la cámara haciendo clic en el panel cámara: " + ex.getMessage());
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(lblCamera, "Active la cámara haciendo clic en el panel cámara: ");
        }
    }//GEN-LAST:event_btnTakePhotoActionPerformed

    private void loadPhotoPerson(String name) {
        lblPhoto.setIcon(Images.getImage(name));
        lblPhoto.validate();
        lblPhoto.repaint();
    }

    private void lblCameraMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblCameraMouseClicked
        // TODO add your handling code here:

        if (encendidoCamara) {
            apagarCamara();
            encendidoCamara = false;
        } else {
            encenderCamara();
            encendidoCamara = true;
        }
    }//GEN-LAST:event_lblCameraMouseClicked

    private void lblPhotoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblPhotoMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_lblPhotoMouseClicked

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        // TODO add your handling code here:
        loadSearchPeople(txtSearch.getText());
    }//GEN-LAST:event_txtSearchKeyReleased

    private void tListPeopleMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tListPeopleMouseClicked
        // TODO add your handling code here:
        int fila = tListPeople.getSelectedRow();
        if (fila == -1) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar una fila");
        } else {
            btnDelete.setVisible(true);
            btnSave.setVisible(false);
            btnSaveChanges.setVisible(true);
            try {

                person = personDao.get(Integer.parseInt(tListPeople.getValueAt(fila, 0).toString()));
                lblID.setText(String.valueOf(person.getId()));
                txtFirstName.setText(person.getFirstName());
                txtLastName.setText(person.getLastName());
                txtIdentificationId.setText(person.getIdentificationId());
                txtAddress.setText(person.getAddress());
                txtEmail.setText(person.getEmail());
                txtDate.setDatoFecha(person.getBirthday());
                txtPhone.setText(person.getPhone());
                lblActive.setText(person.getActive());
                System.out.println("Foto: "+person.getPhoto());
                loadPhotoPerson(person.getPhoto()+".png");
                TypePerson typePerson = typePersonDao.get(person.getTypePersonId());
                cbTypePeople.getModel().setSelectedItem(typePerson);
                txtIdentificationId.setEnabled(false);

            } catch (SQLException ex) {
                Logger.getLogger(CategoryView.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "Error al eliminar: " + ex.getMessage());
            } catch (Exception ex) {
                Logger.getLogger(CategoryView.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "Error al eliminar: " + ex.getMessage());
            }

        }
    }//GEN-LAST:event_tListPeopleMouseClicked

    public void loadTypePeople() {
        try {
            cbTypePeople.removeAllItems();
            List<TypePerson> items = typePersonDao.getList();
            for (TypePerson tp : items) {
                cbTypePeople.addItem(tp);
            }
        } catch (Exception ex) {
            Logger.getLogger(PersonView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void loadSearchPeople(String text) {
        try {
            loadTable(personDao.searchList(text));
        } catch (Exception ex) {
            Logger.getLogger(CategoryView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error al buscar: " + ex.getMessage());
        }
    }

    public void encenderCamara() {

        if (webcam == null) {
            encendidoCamara = true;
            webcam = Webcam.getDefault();
            webcam.setViewSize(webcam.getViewSizes()[0]);
            panel = new WebcamPanel(webcam, false);
            panel.setPreferredSize(webcam.getViewSize());
            panel.setOpaque(true);
            panel.setBackground(Color.BLACK);
            panel.setBounds(0, 0, 400, 300);
            lblCamera.add(panel);
            if (initialized.compareAndSet(false, true)) {
                executor.execute(new Runnable() {
                    @Override
                    public void run() {
                        panel.start();
                    }
                });
            }
        } else {
            webcam.open();
            panel.start();
        }
    }

    public void apagarCamara() {
        try {
            if (webcam != null) {
                webcam.close();
            }

        } catch (WebcamException e) {
            System.out.println("No esta encendida la camara: " + e.getMessage());
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCleanForm;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSaveChanges;
    private javax.swing.JButton btnTakePhoto;
    private javax.swing.JComboBox<TypePerson> cbTypePeople;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblActive;
    private javax.swing.JLabel lblCamera;
    private javax.swing.JLabel lblID;
    private javax.swing.JLabel lblPhoto;
    private javax.swing.JLabel lblSearch;
    private javax.swing.JTable tListPeople;
    private javax.swing.JTextField txtAddress;
    private rojeru_san.componentes.RSDateChooser txtDate;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtFirstName;
    private javax.swing.JTextField txtIdentificationId;
    private javax.swing.JTextField txtLastName;
    private javax.swing.JTextField txtPhone;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
