--ORACLE DB
--Eliminacion de las tablas
DROP TABLE JORGE.CATEGORY PURGE;
DROP TABLE JORGE.TYPE_PERSON PURGE;
DROP TABLE JORGE.TYPE_VOUCHER PURGE;
DROP PACKAGE CATEGORY_API;
/
--Creacion de las tablas
create table category (
		id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
		name varchar(50) NOT NULL,
		description varchar(300),
		primary key (id)
	);
/	
create table type_person (
		id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY, -- serial crea una secuencia de manera automatica y no es necesario establecer id
		name varchar(50) NOT NULL,
		description varchar(300),
		primary key (id)
	);
/
create table person (
    id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    first_name varchar2(70) not null,
    last_name varchar2(70) not null,
    identification_id varchar2(16) not null,
    address varchar2(300),
    email varchar2(150),
    birthday DATE,
    phone varchar2(40),
    active varchar2(1),
    photo varchar2(300),
    type_person_id number not null,
    primary key (id),
    foreign key (type_person_id) references type_person(id)
  );
  /
create table type_voucher (
		id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY, -- serial crea una secuencia de manera automatica y no es necesario establecer id
		name varchar(50) NOT NULL,
		description varchar(300),
		primary key (id)
	);
/
create table type_suscription (
    id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    name varchar(50),
    num_days NUMBER(5),
    price NUMBER(10,2),
    description varchar(300),
    primary key (id)
  );
 /
--Creacion de los procedimientos almacenados
create or replace PACKAGE category_api AS
	procedure ins (p_NAME in CATEGORY.NAME%type,p_DESCRIPTION in CATEGORY.DESCRIPTION%type default null);
	procedure upd (p_ID IN CATEGORY.ID%TYPE, p_NAME in CATEGORY.NAME%TYPE, p_DESCRIPTION in CATEGORY.DESCRIPTION%type default null);
	procedure del (p_ID in CATEGORY.ID%type);
	PROCEDURE LIST(CATEGORIES_C OUT SYS_REFCURSOR);
    procedure search(p_texto IN varchar2,CATEGORIES_C OUT SYS_REFCURSOR);
    procedure getCategory(p_id IN category.id%TYPE,CATEGORIES_C OUT SYS_REFCURSOR);
END category_api;
/
create or replace NONEDITIONABLE PACKAGE BODY category_api AS
	procedure ins (p_NAME in CATEGORY.NAME%type,p_DESCRIPTION in CATEGORY.DESCRIPTION%type default null) 
	is
	begin
		insert into CATEGORY(DESCRIPTION,NAME) values (p_DESCRIPTION,p_NAME);
		COMMIT;
	end;

	procedure del (p_ID in CATEGORY.ID%type) 
	IS
	BEGIN
		delete from CATEGORY where ID = p_ID;
		COMMIT;
	end;

	procedure upd (p_ID IN CATEGORY.ID%TYPE, p_NAME in CATEGORY.NAME%TYPE, p_DESCRIPTION in CATEGORY.DESCRIPTION%type default null) 
	is
	begin
		update CATEGORY set	DESCRIPTION = p_DESCRIPTION, NAME = p_NAME
		where ID = p_ID;
		COMMIT;
	end;

	PROCEDURE LIST(CATEGORIES_C OUT SYS_REFCURSOR)
	IS
	BEGIN 
		OPEN CATEGORIES_C FOR 
			SELECT * 
			FROM CATEGORY c;
	END LIST;
    
    procedure search(p_texto IN varchar2,CATEGORIES_C OUT SYS_REFCURSOR)
    IS
    BEGIN
        OPEN CATEGORIES_C FOR
            SELECT *
            FROM CATEGORY c
            WHERE UPPER(c.name) ||' '|| upper(c.description) like '%'||upper(p_texto)||'%';
    END;
    
    procedure getCategory(p_id IN category.id%TYPE,CATEGORIES_C OUT SYS_REFCURSOR)
    IS
    BEGIN
        OPEN CATEGORIES_C FOR
            SELECT *
            FROM CATEGORY c
            WHERE c.id = p_id ;
    END;

END category_api;
/
create or replace PACKAGE type_person_api AS
	procedure ins (p_NAME in TYPE_PERSON.NAME%type,p_DESCRIPTION in TYPE_PERSON.DESCRIPTION%type default null);
	procedure upd (p_ID IN TYPE_PERSON.ID%TYPE, p_NAME in TYPE_PERSON.NAME%TYPE, p_DESCRIPTION in TYPE_PERSON.DESCRIPTION%type default null);
	procedure del (p_ID in TYPE_PERSON.ID%type) ;
	procedure list(TYPE_PEOPLE_C OUT SYS_REFCURSOR);
    procedure search(p_texto IN varchar2, TYPE_PEOPLE_C OUT SYS_REFCURSOR);
    procedure getTypePerson(p_id IN category.id%TYPE,TYPE_PERSON_C OUT SYS_REFCURSOR);
END type_person_api;
/
create or replace PACKAGE BODY type_person_api AS
	procedure ins (p_NAME in TYPE_PERSON.NAME%type,p_DESCRIPTION in TYPE_PERSON.DESCRIPTION%type default null) 
	is
	begin
		insert into TYPE_PERSON(DESCRIPTION,NAME) values (p_DESCRIPTION,p_NAME);
		COMMIT;
	end;

	procedure upd (p_ID IN TYPE_PERSON.ID%TYPE, p_NAME in TYPE_PERSON.NAME%TYPE, p_DESCRIPTION in TYPE_PERSON.DESCRIPTION%type default null) 
	is
	begin
		update TYPE_PERSON set DESCRIPTION = p_DESCRIPTION, NAME = p_NAME
		where ID = p_ID;
		COMMIT;
	end;

    procedure del (p_ID in TYPE_PERSON.ID%type) 
	IS
	BEGIN
		delete from TYPE_PERSON where ID = p_ID;
		COMMIT;
	end;

	procedure list(TYPE_PEOPLE_C OUT SYS_REFCURSOR)
	IS
	BEGIN 
		OPEN TYPE_PEOPLE_C FOR 
			SELECT * 
			FROM TYPE_PERSON c;
            
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            dbms_output.put_line('No hay datos de category');
	END LIST;
    
    procedure search(p_texto IN varchar2, TYPE_PEOPLE_C OUT SYS_REFCURSOR)
    IS
    BEGIN
        OPEN TYPE_PEOPLE_C FOR
            SELECT *
            FROM TYPE_PERSON c
            WHERE UPPER(c.name) ||' '|| upper(c.description) like '%'||upper(p_texto)||'%';
    
    END;
    
    procedure getTypePerson(p_id IN category.id%TYPE,TYPE_PERSON_C OUT SYS_REFCURSOR)
    IS
    BEGIN
        OPEN TYPE_PERSON_C FOR
            SELECT *
            FROM TYPE_PERSON c
            WHERE c.id = p_id ;
    END;

END type_person_api;
/
CREATE OR REPLACE NONEDITIONABLE PACKAGE person_api AS
  procedure ins (p_first_name in person.first_name%type, p_last_name in person.last_name%type, p_identification_id in person.identification_id%type,
                p_address in person.address%type default null, p_email in person.email%type, p_birthday in person.birthday%type, p_phone in person.phone%type, p_active in person.active%type,
                p_photo in person.photo%type, p_type_person_id in person.type_person_id%type);
  procedure upd (p_ID IN person.ID%TYPE, p_first_name in person.first_name%type, p_last_name in person.last_name%type, p_identification_id in person.identification_id%type,
                p_address in person.address%type default null, p_email in person.email%type, p_birthday in person.birthday%type, p_phone in person.phone%type, p_active in person.active%type,
                p_photo in person.photo%type, p_type_person_id in person.type_person_id%type);
  procedure del (p_ID in person.ID%type);
  procedure list(person_C OUT SYS_REFCURSOR);
  procedure search(p_texto IN varchar2,person_C OUT SYS_REFCURSOR);
  procedure getPerson(p_id IN person.id%TYPE,person_C OUT SYS_REFCURSOR);
END person_api;
/
CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY person_api AS
  procedure ins (p_first_name in person.first_name%type, p_last_name in person.last_name%type, p_identification_id in person.identification_id%type,
                p_address in person.address%type default null, p_email in person.email%type, p_birthday in person.birthday%type, p_phone in person.phone%type, p_active in person.active%type,
                p_photo in person.photo%type, p_type_person_id in person.type_person_id%type)
  is
  begin
    insert into person(first_name,last_name,identification_id,address,email,birthday,phone,active,photo,type_person_id) 
                values (p_first_name, p_last_name, p_identification_id, p_address, p_email, p_birthday, p_phone, p_active, p_photo, p_type_person_id);
    COMMIT;
  end;

  procedure upd (p_ID IN person.ID%TYPE, p_first_name in person.first_name%type, p_last_name in person.last_name%type, p_identification_id in person.identification_id%type,
                p_address in person.address%type default null, p_email in person.email%type, p_birthday in person.birthday%type, p_phone in person.phone%type, p_active in person.active%type,
                p_photo in person.photo%type, p_type_person_id in person.type_person_id%type)
  is
  begin
    update person p set first_name = p_first_name, last_name = p_last_name, identification_id = p_identification_id, address = p_address, email = p_email,
                        birthday = p_birthday, phone = p_phone, active = p_active, photo = p_photo, type_person_id = p_type_person_id
    where ID = p_ID;
    COMMIT;
  end;

  procedure del (p_ID in person.ID%type)
  IS
  BEGIN
    delete from person where ID = p_ID;
    COMMIT;
  end;

  procedure list(person_C OUT SYS_REFCURSOR)
  IS
  BEGIN
    OPEN person_C FOR
      SELECT *
      FROM person c;

    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            dbms_output.put_line('No hay datos de person');
  END LIST;

  procedure search(p_texto IN varchar2,person_C OUT SYS_REFCURSOR)
  IS
  BEGIN
      OPEN person_C FOR
          SELECT *
          FROM person p
          WHERE UPPER(p.first_name) ||' '|| upper(p.last_name)||' '|| upper(p.identification_id) like '%'||upper(p_texto)||'%';
  EXCEPTION
      WHEN NO_DATA_FOUND THEN
          dbms_output.put_line('No hay datos de person');
  END;

  procedure getPerson(p_id IN person.id%TYPE,person_C OUT SYS_REFCURSOR)
  IS
  BEGIN
      OPEN person_C FOR
          SELECT *
          FROM person c
          WHERE c.id = p_id ;
  END;

END person_api;
/
create or replace PACKAGE type_voucher_api AS
	procedure ins (p_NAME in type_voucher.NAME%type,p_DESCRIPTION in type_voucher.DESCRIPTION%type default null);
	procedure upd (p_ID IN type_voucher.ID%TYPE, p_NAME in type_voucher.NAME%TYPE, p_DESCRIPTION in type_voucher.DESCRIPTION%type default null);
	procedure del (p_ID in type_voucher.ID%type);
	procedure list(type_voucher_C OUT SYS_REFCURSOR);
    procedure search(p_texto IN varchar2,type_voucher_C OUT SYS_REFCURSOR);
    procedure getTypeVoucher(p_id IN type_voucher.id%TYPE,type_voucher_C OUT SYS_REFCURSOR);
END type_voucher_api;
/
create or replace NONEDITIONABLE PACKAGE BODY type_voucher_api AS
	procedure ins (p_NAME in type_voucher.NAME%type,p_DESCRIPTION in type_voucher.DESCRIPTION%type default null)
	is
	begin
		insert into type_voucher(DESCRIPTION,NAME) values (p_DESCRIPTION,p_NAME);
		COMMIT;
	end;
    
	procedure upd (p_ID IN type_voucher.ID%TYPE, p_NAME in type_voucher.NAME%TYPE, p_DESCRIPTION in type_voucher.DESCRIPTION%type default null)
	is
	begin
		update type_voucher set	DESCRIPTION = p_DESCRIPTION, NAME = p_NAME
		where ID = p_ID;
		COMMIT;
	end;
    
    procedure del (p_ID in type_voucher.ID%type)
	IS
	BEGIN
		delete from type_voucher where ID = p_ID;
		COMMIT;
	end;

	procedure list(type_voucher_C OUT SYS_REFCURSOR)
	IS
	BEGIN 
		OPEN type_voucher_C FOR 
			SELECT * 
			FROM type_voucher c;
            
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            dbms_output.put_line('No hay datos de type_voucher');
	END LIST;
    
    procedure search(p_texto IN varchar2,type_voucher_C OUT SYS_REFCURSOR)
    IS
    BEGIN
        OPEN type_voucher_C FOR
            SELECT *
            FROM type_voucher c
            WHERE UPPER(c.name) ||' '|| upper(c.description) like '%'||upper(p_texto)||'%';
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            dbms_output.put_line('No hay datos de type_voucher');
    END;
    
    procedure getTypeVoucher(p_id IN type_voucher.id%TYPE,type_voucher_C OUT SYS_REFCURSOR)
    IS
    BEGIN
        OPEN type_voucher_C FOR
            SELECT *
            FROM type_voucher c
            WHERE c.id = p_id ;
    END;

END type_voucher_api;
/
CREATE OR REPLACE NONEDITIONABLE PACKAGE type_suscription_api AS
  procedure ins (p_NAME in type_suscription.NAME%type, p_num_days in type_suscription.num_days%type, p_price in type_suscription.price%type,p_DESCRIPTION in type_suscription.DESCRIPTION%type default null);
  procedure upd (p_ID IN type_suscription.ID%TYPE, p_NAME in type_suscription.NAME%type, p_num_days in type_suscription.num_days%type, p_price in type_suscription.price%type,p_DESCRIPTION in type_suscription.DESCRIPTION%type default null);
  procedure del (p_ID in type_suscription.ID%type);
  procedure list(type_suscription_C OUT SYS_REFCURSOR);
  procedure search(p_texto IN varchar2,type_suscription_C OUT SYS_REFCURSOR);
  procedure getTypeSuscription(p_id IN type_suscription.id%TYPE,type_suscription_C OUT SYS_REFCURSOR);
END type_suscription_api;
/
CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY type_suscription_api AS
  procedure ins (p_NAME in type_suscription.NAME%type, p_num_days in type_suscription.num_days%type, p_price in type_suscription.price%type,p_DESCRIPTION in type_suscription.DESCRIPTION%type default null)
  is
  begin
    insert into type_suscription(NAME, num_days, price, description) values (p_NAME, p_num_days, p_price, p_description);
    COMMIT;
  end;

  procedure upd (p_ID IN type_suscription.ID%TYPE, p_NAME in type_suscription.NAME%type, p_num_days in type_suscription.num_days%type, p_price in type_suscription.price%type,p_DESCRIPTION in type_suscription.DESCRIPTION%type default null)
  is
  begin
    update type_suscription set DESCRIPTION = p_DESCRIPTION, NAME = p_NAME, NUM_DAYS = p_num_days, PRICE = p_price
    where ID = p_ID;
    COMMIT;
  end;

  procedure del (p_ID in type_suscription.ID%type)
  IS
  BEGIN
    delete from type_suscription where ID = p_ID;
    COMMIT;
  end;

  procedure list(type_suscription_C OUT SYS_REFCURSOR)
  IS
  BEGIN 
    OPEN type_suscription_C FOR 
      SELECT * 
      FROM type_suscription c;

    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            dbms_output.put_line('No hay datos de type_suscription');
  END LIST;

  procedure search(p_texto IN varchar2,type_suscription_C OUT SYS_REFCURSOR)
  IS
  BEGIN
      OPEN type_suscription_C FOR
          SELECT *
          FROM type_suscription c
          WHERE UPPER(c.name) ||' '|| upper(c.description) like '%'||upper(p_texto)||'%';
  EXCEPTION
      WHEN NO_DATA_FOUND THEN
          dbms_output.put_line('No hay datos de type_suscription');
  END;

  procedure getTypeSuscription(p_id IN type_suscription.id%TYPE,type_suscription_C OUT SYS_REFCURSOR)
  IS
  BEGIN
      OPEN type_suscription_C FOR
          SELECT *
          FROM type_suscription c
          WHERE c.id = p_id ;
  END;

END type_suscription_api;
